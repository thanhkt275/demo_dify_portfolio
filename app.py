import os
import json
import requests
import streamlit as st
from typing import Dict, Any

st.set_page_config(page_title="Portfolio Generator via Dify", page_icon="üß©", layout="wide")

# ===== Helpers =====
def get_secret(name: str, default: str = "") -> str:
    try:
        return st.secrets.get(name, default)
    except Exception:
        return os.getenv(name, default)

DIFY_API_KEY = get_secret("DIFY_API_KEY")
BASE_URL     = get_secret("BASE_URL", "https://api.dify.ai").rstrip("/")
WORKFLOW_ID  = get_secret("WORKFLOW_ID", "")  # d√πng n·∫øu endpoint c·∫ßn

def call_dify_workflow(inputs: Dict[str, Any], user_id: str) -> Dict[str, Any]:
    """
    G·ªçi Dify Workflows (blocking) tr·∫£ v·ªÅ k·∫øt qu·∫£ ngay.
    Hai bi·∫øn th·ªÉ ph·ªï bi·∫øn c·ªßa endpoint (t√πy phi√™n b·∫£n Dify b·∫°n d√πng):
    1) POST {BASE_URL}/v1/workflows/run
       body: {"workflow_id": "...", "inputs": {...}, "response_mode": "blocking", "user": "..."}
    2) POST {BASE_URL}/v1/workflows/{workflow_id}/run
       body: {"inputs": {...}, "response_mode": "blocking", "user": "..."}

    H√†m n√†y th·ª≠ #2 tr∆∞·ªõc (n·∫øu c√≥ WORKFLOW_ID); n·∫øu l·ªói 404 s·∫Ω fallback sang #1.
    """
    headers = {
        "Authorization": f"Bearer {DIFY_API_KEY}",
        "Content-Type": "application/json",
    }

    # N·∫øu c√≥ WORKFLOW_ID -> th·ª≠ variant /v1/workflows/{id}/run
    if WORKFLOW_ID:
        url = f"{BASE_URL}/v1/workflows/{WORKFLOW_ID}/run"
        payload = {
            "inputs": inputs,
            "response_mode": "blocking",
            "user": user_id or "anonymous"
        }
        resp = requests.post(url, headers=headers, json=payload, timeout=120)
        # N·∫øu server kh√¥ng bi·∫øt endpoint n√†y, th·ª≠ fallback
        if resp.status_code != 404:
            return {"status_code": resp.status_code, "json": safe_json(resp)}

    # Fallback: /v1/workflows/run k√®m workflow_id
    url = f"{BASE_URL}/v1/workflows/run"
    payload = {
        "workflow_id": WORKFLOW_ID or inputs.get("sys.workflow_id") or "",
        "inputs": inputs,
        "response_mode": "blocking",
        "user": user_id or "anonymous"
    }
    resp = requests.post(url, headers=headers, json=payload, timeout=120)
    return {"status_code": resp.status_code, "json": safe_json(resp)}

def safe_json(resp: requests.Response) -> Dict[str, Any]:
    try:
        return resp.json()
    except Exception:
        return {"raw_text": resp.text}

def extract_html(result: Dict[str, Any]) -> str:
    """
    Output
    - {"data": {"outputs": {"html": "<...>"}}}
    - ho·∫∑c {"data": {"output": "<...>"}} / {"data": "<...>"} / {"output_text": "<...>"}
    - ho·∫∑c text c√≥ ch·ª©a markdown code block ```html...```
    H√†m n√†y qu√©t c√°c n∆°i hay g·∫∑p ƒë·ªÉ l·∫•y HTML.
    """
    if not result:
        return ""
    
    def extract_html_from_markdown(text: str) -> str:
        """
        Tr√≠ch xu·∫•t HTML t·ª´ markdown code block.
        T√¨m ```html...``` ho·∫∑c ````html...```` v√† l·∫•y n·ªôi dung b√™n trong.
        """
        if not isinstance(text, str):
            return ""
        
        import re
        # T√¨m code block html v·ªõi √≠t nh·∫•t 3 backticks
        patterns = [
            r'```+html\s*\n(.*?)```+',  # ```html ho·∫∑c ````html
            r'```+\s*\n<!DOCTYPE html(.*?)```+',  # ```\n<!DOCTYPE html (tr∆∞·ªùng h·ª£p kh√¥ng c√≥ label html)
            r'```+\s*\n<html(.*?)```+',  # ```\n<html
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.DOTALL | re.IGNORECASE)
            if matches:
                html_content = matches[0].strip()
                # N·∫øu match ƒë·∫ßu ti√™n kh√¥ng ph·∫£i l√† HTML ho√†n ch·ªânh, th·ª≠ gh√©p l·∫°i
                if pattern != r'```+html\s*\n(.*?)```+':
                    if pattern == r'```+\s*\n<!DOCTYPE html(.*?)```+':
                        html_content = "<!DOCTYPE html" + html_content
                    elif pattern == r'```+\s*\n<html(.*?)```+':
                        html_content = "<html" + html_content
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i HTML h·ª£p l·ªá kh√¥ng
                if html_content and ('<html' in html_content.lower() or '<!doctype html' in html_content.lower()):
                    return html_content
        
        return ""
    
    # c√°c ƒë∆∞·ªùng d·∫´n ph·ªï bi·∫øn
    candidates = [
        ("data", "outputs", "output"),  # ƒê∆∞·ªùng d·∫´n ch√≠nh cho format Dify m·ªõi
        ("data", "outputs", "html"),
        ("data", "output"),
        ("data",),
        ("output_text",),
        ("outputs", "html"),
        ("html",),
        ("output",),  # th√™m output tr·ª±c ti·∫øp
    ]
    
    def deep_get(d, path):
        cur = d
        for k in path:
            if isinstance(cur, dict) and k in cur:
                cur = cur[k]
            else:
                return None
        return cur

    for path in candidates:
        val = deep_get(result, path)
        if isinstance(val, str) and len(val.strip()) > 0:
            # Th·ª≠ tr√≠ch xu·∫•t HTML t·ª´ markdown tr∆∞·ªõc
            html_from_markdown = extract_html_from_markdown(val)
            if html_from_markdown:
                return html_from_markdown
            # N·∫øu kh√¥ng ph·∫£i markdown, ki·ªÉm tra xem c√≥ ph·∫£i HTML th√¥ kh√¥ng
            if '<html' in val.lower() or '<!doctype html' in val.lower():
                return val

    # N·∫øu Dify tr·∫£ danh s√°ch events (stream ƒë√£ gom), l·∫•y ph·∫ßn text cu·ªëi
    if isinstance(result, dict) and "events" in result and isinstance(result["events"], list):
        texts = [e.get("data", {}).get("text", "") for e in result["events"] if isinstance(e, dict)]
        texts = [t for t in texts if isinstance(t, str) and t.strip()]
        if texts:
            # Th·ª≠ tr√≠ch xu·∫•t t·ª´ text cu·ªëi c√πng
            html_from_markdown = extract_html_from_markdown(texts[-1])
            if html_from_markdown:
                return html_from_markdown
            # Ho·∫∑c gh√©p t·∫•t c·∫£ text l·∫°i v√† th·ª≠ tr√≠ch xu·∫•t
            combined_text = "\n".join(texts)
            html_from_markdown = extract_html_from_markdown(combined_text)
            if html_from_markdown:
                return html_from_markdown
            return texts[-1]
    
    return ""

# ===== UI =====
st.title("üß© Portfolio Generator (Dify Workflow + Streamlit)")
st.write("ƒêi·ªÅn th√¥ng tin c√° nh√¢n, g·ª≠i qua Dify Workflow ƒë·ªÉ sinh **HTML portfolio**, v√† xem k·∫øt qu·∫£ ngay b√™n d∆∞·ªõi.")

with st.sidebar:
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh")
    if not DIFY_API_KEY:
        st.warning("B·∫°n ch∆∞a c·∫•u h√¨nh `DIFY_API_KEY` trong secrets. Vui l√≤ng th√™m tr∆∞·ªõc khi ch·∫°y.")
    st.text_input("BASE_URL", value=BASE_URL, help="URL server c·ªßa Dify (m·∫∑c ƒë·ªãnh https://api.dify.ai)", key="base_url_disabled", disabled=True)
    st.text_input("WORKFLOW_ID (t√πy ch·ªçn)", value=WORKFLOW_ID, key="wf_id_disabled", disabled=True)
    st.info("B·∫°n c√≥ th·ªÉ thay ƒë·ªïi trong `.streamlit/secrets.toml`.")

with st.form("portfolio_form"):
    col1, col2 = st.columns(2)
    with col1:
        full_name = st.text_input("H·ªç v√† t√™n", value="Tr·∫ßn Kh√°nh Th√†nh")
        job_title = st.text_input("Ch·ª©c danh", value="Software Engineer")
        email = st.text_input("Email", value="thanhkt27507@gmail.com")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value="0364491720")
        location = st.text_input("ƒê·ªãa ƒëi·ªÉm", value="Ha Noi")
        birth = st.text_input("NƒÉm sinh", value="2007")
        experience_years = st.text_input("S·ªë nƒÉm kinh nghi·ªám", value="5")
    with col2:
        about_me = st.text_area("Gi·ªõi thi·ªáu", height=120, value="I will study in Vin University , Electrical and Computer Engineering Major")
        skills = st.text_input("K·ªπ nƒÉng (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y)", value="Python, C++, Langchain")
        education = st.text_input("H·ªçc v·∫•n", value="Vin Univeristy")
        social_links = st.text_input("Li√™n k·∫øt m·∫°ng x√£ h·ªôi", value="github.com")

    # (T√πy ch·ªçn) upload file n·∫øu workflow c√≥ node ƒë·ªçc file
    uploaded_files = st.file_uploader("ƒê√≠nh k√®m t·ªáp (t√πy ch·ªçn)", type=["pdf", "png", "jpg", "jpeg", "txt", "md"], accept_multiple_files=True)

    user_id = st.text_input("User ID", value="3a469858-bd0a-4800-97e7-c572d7bbb759")
    submitted = st.form_submit_button("üöÄ Generate HTML via Dify", use_container_width=True)

# ===== Submit =====
if submitted:
    if not DIFY_API_KEY:
        st.error("Thi·∫øu DIFY_API_KEY. Vui l√≤ng c·∫•u h√¨nh trong secrets.")
        st.stop()

    # Chu·∫©n ho√° inputs theo v√≠ d·ª• b·∫°n ƒë∆∞a:
    inputs = {
        "full_name": full_name.strip(),
        "job_title": job_title.strip(),
        "about_me": about_me.strip(),
        "skills": skills.strip(),
        "email": email.strip(),
        "phone": phone.strip(),
        "location": location.strip(),
        "birth": birth.strip(),
        "experience_years": experience_years.strip(),
        "education": education.strip(),
        "social_links": social_links.strip(),
        # N·∫øu workflow c·ªßa b·∫°n c√≥ s·ª≠ d·ª•ng c√°c sys.* th√¨ c√≥ th·ªÉ truy·ªÅn th√™m:
        # "sys.files": [],  # ·ªü d∆∞·ªõi c√≥ v√≠ d·ª• chuy·ªÉn file -> base64/URL n·∫øu c·∫ßn
        # "sys.app_id": "...",
        # "sys.workflow_id": WORKFLOW_ID or "..."
    }

    # ƒê√≠nh k√®m file n·∫øu workflow c·∫ßn (minh ho·∫°: ƒë·ªçc bytes -> base64)
    # Nhi·ªÅu workflow c·ªßa Dify ƒë·ªçc file t·ª´ "sys.files" theo d·∫°ng URL; n·∫øu b·∫°n c·∫ßn upload l√™n storage kh√°c r·ªìi truy·ªÅn URL.
    # ·ªû ƒë√¢y ch·ªâ demo c√°ch ƒë∆∞a metadata v·ªÅ file; ƒëi·ªÅu ch·ªânh theo node ƒë·ªçc file c·ªßa b·∫°n.
    sys_files = []
    for f in uploaded_files or []:
        sys_files.append({"name": f.name, "size": f.size, "mime": f.type})
    if sys_files:
        inputs["sys.files"] = sys_files

    with st.spinner("ƒêang g·ªçi Dify workflow (blocking)‚Ä¶"):
        BASE_URL = get_secret("BASE_URL", "https://api.dify.ai").rstrip("/")
        result = call_dify_workflow(inputs, user_id=user_id)

    status = result.get("status_code", 0)
    payload = result.get("json", {})

    colA, colB = st.columns([2, 1])
    with colB:
        st.markdown("### Tr·∫°ng th√°i")
        st.code(status)
        st.markdown("### Ph·∫£n h·ªìi th√¥")
        st.json(payload)

    # C·ªë g·∫Øng l·∫•y HTML t·ª´ payload
    html = extract_html(payload)
    with colA:
        st.markdown("### üîß K·∫øt qu·∫£ HTML")
        if html:
            # render ngay trong trang
            st.components.v1.html(html, height=900, scrolling=True)
            # Cho ph√©p t·∫£i file HTML
            st.download_button(
                "‚¨áÔ∏è T·∫£i v·ªÅ portfolio.html",
                data=html.encode("utf-8"),
                file_name="portfolio.html",
                mime="text/html",
                use_container_width=True
            )
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y chu·ªói HTML trong ph·∫£n h·ªìi. H√£y ki·ªÉm tra c·∫•u h√¨nh node output c·ªßa Workflow.")

# ===== Tips =====
with st.expander("üí° G·ª£i √Ω c·∫•u h√¨nh Workflow trong Dify"):
    st.markdown(
        """
- ·ªû node **Start**, ƒë·ªãnh nghƒ©a c√°c **inputs**: `full_name`, `job_title`, `about_me`, `skills`, `email`, `phone`, `location`, `birth`, `experience_years`, `education`, `social_links`.
- ·ªû node **LLM / Code / Tool** sinh ra chu·ªói **HTML** ho√†n ch·ªânh (bao g·ªìm `<html>‚Ä¶</html>`).
- ·ªû node **End**, ƒë·∫∑t m·ªôt bi·∫øn output (v√≠ d·ª• `html`) ch·ª©a chu·ªói HTML ƒë√≥, ƒë·ªÉ API c√≥ th·ªÉ tr·∫£ v·ªÅ d·∫°ng `{"data": {"outputs": {"html": "<‚Ä¶>"}}}`.
- D√πng **response_mode = "blocking"** trong API ƒë·ªÉ Streamlit ch·ªù ƒë·ªß HTML r·ªìi render.
- N·∫øu self-host, ki·ªÉm tra CORS/Firewall cho endpoint `/v1/workflows/run` ho·∫∑c `/v1/workflows/{id}/run`.
        """
    )
